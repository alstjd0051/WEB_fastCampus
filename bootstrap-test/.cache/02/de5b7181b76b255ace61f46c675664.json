{"id":"node_modules/map-stream/index.js","dependencies":[{"name":"C:\\dev\\Workspaces\\WEB_fastCampus\\bootstrap-test\\package.json","includedInParent":true,"mtime":1624817355327},{"name":"C:\\dev\\Workspaces\\WEB_fastCampus\\bootstrap-test\\node_modules\\map-stream\\package.json","includedInParent":true,"mtime":1624817354931},{"name":"stream","loc":{"line":8,"column":21},"parent":"C:\\dev\\Workspaces\\WEB_fastCampus\\bootstrap-test\\node_modules\\map-stream\\index.js","resolved":"C:\\dev\\Workspaces\\WEB_fastCampus\\bootstrap-test\\node_modules\\stream-browserify\\index.js"},{"name":"process","parent":"C:\\dev\\Workspaces\\WEB_fastCampus\\bootstrap-test\\node_modules\\map-stream\\index.js","resolved":"C:\\dev\\Workspaces\\WEB_fastCampus\\bootstrap-test\\node_modules\\process\\browser.js"}],"generated":{"js":"var process = require(\"process\");\n//filter will reemit the data if cb(err,pass) pass is truthy\n\n// reduce is more tricky\n// maybe we want to group the reductions or emit progress updates occasionally\n// the most basic reduce just emits one 'data' event after it has recieved 'end'\n\n\nvar Stream = require('stream').Stream\n\n\n//create an event stream and apply function to each .write\n//emitting each response as data\n//unless it's an empty callback\n\nmodule.exports = function (mapper) {\n  var stream = new Stream()\n    , inputs = 0\n    , outputs = 0\n    , ended = false\n    , paused = false\n    , destroyed = false\n\n  stream.writable = true\n  stream.readable = true\n   \n  stream.write = function () {\n    if(ended) throw new Error('map stream is not writable')\n    inputs ++\n    var args = [].slice.call(arguments)\n      , r\n      , inNext = false \n    //pipe only allows one argument. so, do not \n    function next (err) {\n      if(destroyed) return\n      inNext = true\n      outputs ++\n      var args = [].slice.call(arguments)\n      if(err) {\n        args.unshift('error')\n        return inNext = false, stream.emit.apply(stream, args)\n      }\n      args.shift() //drop err\n      if (args.length) {\n        args.unshift('data')\n        r = stream.emit.apply(stream, args)\n      }\n      if(inputs == outputs) {\n        if(paused) paused = false, stream.emit('drain') //written all the incoming events\n        if(ended) end()\n      }\n      inNext = false\n    }\n    args.push(next)\n    \n    try {\n      //catch sync errors and handle them like async errors\n      var written = mapper.apply(null, args)\n      paused = (written === false)\n      return !paused\n    } catch (err) {\n      //if the callback has been called syncronously, and the error\n      //has occured in an listener, throw it again.\n      if(inNext)\n        throw err\n      next(err)\n      return !paused\n    }\n  }\n\n  function end (data) {\n    //if end was called with args, write it, \n    ended = true //write will emit 'end' if ended is true\n    stream.writable = false\n    if(data !== undefined)\n      return stream.write(data)\n    else if (inputs == outputs) //wait for processing \n      stream.readable = false, stream.emit('end'), stream.destroy() \n  }\n\n  stream.end = function (data) {\n    if(ended) return\n    end()\n  }\n\n  stream.destroy = function () {\n    ended = destroyed = true\n    stream.writable = stream.readable = paused = false\n    process.nextTick(function () {\n      stream.emit('close')\n    })\n  }\n  stream.pause = function () {\n    paused = true\n  }\n\n  stream.resume = function () {\n    paused = false\n  }\n\n  return stream\n}\n\n\n\n\n"},"sourceMaps":{"js":{"mappings":[{"source":"node_modules/map-stream/index.js","original":{"line":1,"column":0},"generated":{"line":2,"column":0}},{"source":"node_modules/map-stream/index.js","original":{"line":2,"column":0},"generated":{"line":3,"column":0}},{"source":"node_modules/map-stream/index.js","original":{"line":3,"column":0},"generated":{"line":4,"column":0}},{"source":"node_modules/map-stream/index.js","original":{"line":4,"column":0},"generated":{"line":5,"column":0}},{"source":"node_modules/map-stream/index.js","original":{"line":5,"column":0},"generated":{"line":6,"column":0}},{"source":"node_modules/map-stream/index.js","original":{"line":6,"column":0},"generated":{"line":7,"column":0}},{"source":"node_modules/map-stream/index.js","original":{"line":7,"column":0},"generated":{"line":8,"column":0}},{"source":"node_modules/map-stream/index.js","original":{"line":8,"column":0},"generated":{"line":9,"column":0}},{"source":"node_modules/map-stream/index.js","original":{"line":9,"column":0},"generated":{"line":10,"column":0}},{"source":"node_modules/map-stream/index.js","original":{"line":10,"column":0},"generated":{"line":11,"column":0}},{"source":"node_modules/map-stream/index.js","original":{"line":11,"column":0},"generated":{"line":12,"column":0}},{"source":"node_modules/map-stream/index.js","original":{"line":12,"column":0},"generated":{"line":13,"column":0}},{"source":"node_modules/map-stream/index.js","original":{"line":13,"column":0},"generated":{"line":14,"column":0}},{"source":"node_modules/map-stream/index.js","original":{"line":14,"column":0},"generated":{"line":15,"column":0}},{"source":"node_modules/map-stream/index.js","original":{"line":15,"column":0},"generated":{"line":16,"column":0}},{"source":"node_modules/map-stream/index.js","original":{"line":16,"column":0},"generated":{"line":17,"column":0}},{"source":"node_modules/map-stream/index.js","original":{"line":17,"column":0},"generated":{"line":18,"column":0}},{"source":"node_modules/map-stream/index.js","original":{"line":18,"column":0},"generated":{"line":19,"column":0}},{"source":"node_modules/map-stream/index.js","original":{"line":19,"column":0},"generated":{"line":20,"column":0}},{"source":"node_modules/map-stream/index.js","original":{"line":20,"column":0},"generated":{"line":21,"column":0}},{"source":"node_modules/map-stream/index.js","original":{"line":21,"column":0},"generated":{"line":22,"column":0}},{"source":"node_modules/map-stream/index.js","original":{"line":22,"column":0},"generated":{"line":23,"column":0}},{"source":"node_modules/map-stream/index.js","original":{"line":23,"column":0},"generated":{"line":24,"column":0}},{"source":"node_modules/map-stream/index.js","original":{"line":24,"column":0},"generated":{"line":25,"column":0}},{"source":"node_modules/map-stream/index.js","original":{"line":25,"column":0},"generated":{"line":26,"column":0}},{"source":"node_modules/map-stream/index.js","original":{"line":26,"column":0},"generated":{"line":27,"column":0}},{"source":"node_modules/map-stream/index.js","original":{"line":27,"column":0},"generated":{"line":28,"column":0}},{"source":"node_modules/map-stream/index.js","original":{"line":28,"column":0},"generated":{"line":29,"column":0}},{"source":"node_modules/map-stream/index.js","original":{"line":29,"column":0},"generated":{"line":30,"column":0}},{"source":"node_modules/map-stream/index.js","original":{"line":30,"column":0},"generated":{"line":31,"column":0}},{"source":"node_modules/map-stream/index.js","original":{"line":31,"column":0},"generated":{"line":32,"column":0}},{"source":"node_modules/map-stream/index.js","original":{"line":32,"column":0},"generated":{"line":33,"column":0}},{"source":"node_modules/map-stream/index.js","original":{"line":33,"column":0},"generated":{"line":34,"column":0}},{"source":"node_modules/map-stream/index.js","original":{"line":34,"column":0},"generated":{"line":35,"column":0}},{"source":"node_modules/map-stream/index.js","original":{"line":35,"column":0},"generated":{"line":36,"column":0}},{"source":"node_modules/map-stream/index.js","original":{"line":36,"column":0},"generated":{"line":37,"column":0}},{"source":"node_modules/map-stream/index.js","original":{"line":37,"column":0},"generated":{"line":38,"column":0}},{"source":"node_modules/map-stream/index.js","original":{"line":38,"column":0},"generated":{"line":39,"column":0}},{"source":"node_modules/map-stream/index.js","original":{"line":39,"column":0},"generated":{"line":40,"column":0}},{"source":"node_modules/map-stream/index.js","original":{"line":40,"column":0},"generated":{"line":41,"column":0}},{"source":"node_modules/map-stream/index.js","original":{"line":41,"column":0},"generated":{"line":42,"column":0}},{"source":"node_modules/map-stream/index.js","original":{"line":42,"column":0},"generated":{"line":43,"column":0}},{"source":"node_modules/map-stream/index.js","original":{"line":43,"column":0},"generated":{"line":44,"column":0}},{"source":"node_modules/map-stream/index.js","original":{"line":44,"column":0},"generated":{"line":45,"column":0}},{"source":"node_modules/map-stream/index.js","original":{"line":45,"column":0},"generated":{"line":46,"column":0}},{"source":"node_modules/map-stream/index.js","original":{"line":46,"column":0},"generated":{"line":47,"column":0}},{"source":"node_modules/map-stream/index.js","original":{"line":47,"column":0},"generated":{"line":48,"column":0}},{"source":"node_modules/map-stream/index.js","original":{"line":48,"column":0},"generated":{"line":49,"column":0}},{"source":"node_modules/map-stream/index.js","original":{"line":49,"column":0},"generated":{"line":50,"column":0}},{"source":"node_modules/map-stream/index.js","original":{"line":50,"column":0},"generated":{"line":51,"column":0}},{"source":"node_modules/map-stream/index.js","original":{"line":51,"column":0},"generated":{"line":52,"column":0}},{"source":"node_modules/map-stream/index.js","original":{"line":52,"column":0},"generated":{"line":53,"column":0}},{"source":"node_modules/map-stream/index.js","original":{"line":53,"column":0},"generated":{"line":54,"column":0}},{"source":"node_modules/map-stream/index.js","original":{"line":54,"column":0},"generated":{"line":55,"column":0}},{"source":"node_modules/map-stream/index.js","original":{"line":55,"column":0},"generated":{"line":56,"column":0}},{"source":"node_modules/map-stream/index.js","original":{"line":56,"column":0},"generated":{"line":57,"column":0}},{"source":"node_modules/map-stream/index.js","original":{"line":57,"column":0},"generated":{"line":58,"column":0}},{"source":"node_modules/map-stream/index.js","original":{"line":58,"column":0},"generated":{"line":59,"column":0}},{"source":"node_modules/map-stream/index.js","original":{"line":59,"column":0},"generated":{"line":60,"column":0}},{"source":"node_modules/map-stream/index.js","original":{"line":60,"column":0},"generated":{"line":61,"column":0}},{"source":"node_modules/map-stream/index.js","original":{"line":61,"column":0},"generated":{"line":62,"column":0}},{"source":"node_modules/map-stream/index.js","original":{"line":62,"column":0},"generated":{"line":63,"column":0}},{"source":"node_modules/map-stream/index.js","original":{"line":63,"column":0},"generated":{"line":64,"column":0}},{"source":"node_modules/map-stream/index.js","original":{"line":64,"column":0},"generated":{"line":65,"column":0}},{"source":"node_modules/map-stream/index.js","original":{"line":65,"column":0},"generated":{"line":66,"column":0}},{"source":"node_modules/map-stream/index.js","original":{"line":66,"column":0},"generated":{"line":67,"column":0}},{"source":"node_modules/map-stream/index.js","original":{"line":67,"column":0},"generated":{"line":68,"column":0}},{"source":"node_modules/map-stream/index.js","original":{"line":68,"column":0},"generated":{"line":69,"column":0}},{"source":"node_modules/map-stream/index.js","original":{"line":69,"column":0},"generated":{"line":70,"column":0}},{"source":"node_modules/map-stream/index.js","original":{"line":70,"column":0},"generated":{"line":71,"column":0}},{"source":"node_modules/map-stream/index.js","original":{"line":71,"column":0},"generated":{"line":72,"column":0}},{"source":"node_modules/map-stream/index.js","original":{"line":72,"column":0},"generated":{"line":73,"column":0}},{"source":"node_modules/map-stream/index.js","original":{"line":73,"column":0},"generated":{"line":74,"column":0}},{"source":"node_modules/map-stream/index.js","original":{"line":74,"column":0},"generated":{"line":75,"column":0}},{"source":"node_modules/map-stream/index.js","original":{"line":75,"column":0},"generated":{"line":76,"column":0}},{"source":"node_modules/map-stream/index.js","original":{"line":76,"column":0},"generated":{"line":77,"column":0}},{"source":"node_modules/map-stream/index.js","original":{"line":77,"column":0},"generated":{"line":78,"column":0}},{"source":"node_modules/map-stream/index.js","original":{"line":78,"column":0},"generated":{"line":79,"column":0}},{"source":"node_modules/map-stream/index.js","original":{"line":79,"column":0},"generated":{"line":80,"column":0}},{"source":"node_modules/map-stream/index.js","original":{"line":80,"column":0},"generated":{"line":81,"column":0}},{"source":"node_modules/map-stream/index.js","original":{"line":81,"column":0},"generated":{"line":82,"column":0}},{"source":"node_modules/map-stream/index.js","original":{"line":82,"column":0},"generated":{"line":83,"column":0}},{"source":"node_modules/map-stream/index.js","original":{"line":83,"column":0},"generated":{"line":84,"column":0}},{"source":"node_modules/map-stream/index.js","original":{"line":84,"column":0},"generated":{"line":85,"column":0}},{"source":"node_modules/map-stream/index.js","original":{"line":85,"column":0},"generated":{"line":86,"column":0}},{"source":"node_modules/map-stream/index.js","original":{"line":86,"column":0},"generated":{"line":87,"column":0}},{"source":"node_modules/map-stream/index.js","original":{"line":87,"column":0},"generated":{"line":88,"column":0}},{"source":"node_modules/map-stream/index.js","original":{"line":88,"column":0},"generated":{"line":89,"column":0}},{"source":"node_modules/map-stream/index.js","original":{"line":89,"column":0},"generated":{"line":90,"column":0}},{"source":"node_modules/map-stream/index.js","original":{"line":90,"column":0},"generated":{"line":91,"column":0}},{"source":"node_modules/map-stream/index.js","original":{"line":91,"column":0},"generated":{"line":92,"column":0}},{"source":"node_modules/map-stream/index.js","original":{"line":92,"column":0},"generated":{"line":93,"column":0}},{"source":"node_modules/map-stream/index.js","original":{"line":93,"column":0},"generated":{"line":94,"column":0}},{"source":"node_modules/map-stream/index.js","original":{"line":94,"column":0},"generated":{"line":95,"column":0}},{"source":"node_modules/map-stream/index.js","original":{"line":95,"column":0},"generated":{"line":96,"column":0}},{"source":"node_modules/map-stream/index.js","original":{"line":96,"column":0},"generated":{"line":97,"column":0}},{"source":"node_modules/map-stream/index.js","original":{"line":97,"column":0},"generated":{"line":98,"column":0}},{"source":"node_modules/map-stream/index.js","original":{"line":98,"column":0},"generated":{"line":99,"column":0}},{"source":"node_modules/map-stream/index.js","original":{"line":99,"column":0},"generated":{"line":100,"column":0}},{"source":"node_modules/map-stream/index.js","original":{"line":100,"column":0},"generated":{"line":101,"column":0}},{"source":"node_modules/map-stream/index.js","original":{"line":101,"column":0},"generated":{"line":102,"column":0}},{"source":"node_modules/map-stream/index.js","original":{"line":102,"column":0},"generated":{"line":103,"column":0}},{"source":"node_modules/map-stream/index.js","original":{"line":103,"column":0},"generated":{"line":104,"column":0}},{"source":"node_modules/map-stream/index.js","original":{"line":104,"column":0},"generated":{"line":105,"column":0}},{"source":"node_modules/map-stream/index.js","original":{"line":105,"column":0},"generated":{"line":106,"column":0}},{"source":"node_modules/map-stream/index.js","original":{"line":106,"column":0},"generated":{"line":107,"column":0}}],"sources":{"node_modules/map-stream/index.js":"//filter will reemit the data if cb(err,pass) pass is truthy\n\n// reduce is more tricky\n// maybe we want to group the reductions or emit progress updates occasionally\n// the most basic reduce just emits one 'data' event after it has recieved 'end'\n\n\nvar Stream = require('stream').Stream\n\n\n//create an event stream and apply function to each .write\n//emitting each response as data\n//unless it's an empty callback\n\nmodule.exports = function (mapper) {\n  var stream = new Stream()\n    , inputs = 0\n    , outputs = 0\n    , ended = false\n    , paused = false\n    , destroyed = false\n\n  stream.writable = true\n  stream.readable = true\n   \n  stream.write = function () {\n    if(ended) throw new Error('map stream is not writable')\n    inputs ++\n    var args = [].slice.call(arguments)\n      , r\n      , inNext = false \n    //pipe only allows one argument. so, do not \n    function next (err) {\n      if(destroyed) return\n      inNext = true\n      outputs ++\n      var args = [].slice.call(arguments)\n      if(err) {\n        args.unshift('error')\n        return inNext = false, stream.emit.apply(stream, args)\n      }\n      args.shift() //drop err\n      if (args.length) {\n        args.unshift('data')\n        r = stream.emit.apply(stream, args)\n      }\n      if(inputs == outputs) {\n        if(paused) paused = false, stream.emit('drain') //written all the incoming events\n        if(ended) end()\n      }\n      inNext = false\n    }\n    args.push(next)\n    \n    try {\n      //catch sync errors and handle them like async errors\n      var written = mapper.apply(null, args)\n      paused = (written === false)\n      return !paused\n    } catch (err) {\n      //if the callback has been called syncronously, and the error\n      //has occured in an listener, throw it again.\n      if(inNext)\n        throw err\n      next(err)\n      return !paused\n    }\n  }\n\n  function end (data) {\n    //if end was called with args, write it, \n    ended = true //write will emit 'end' if ended is true\n    stream.writable = false\n    if(data !== undefined)\n      return stream.write(data)\n    else if (inputs == outputs) //wait for processing \n      stream.readable = false, stream.emit('end'), stream.destroy() \n  }\n\n  stream.end = function (data) {\n    if(ended) return\n    end()\n  }\n\n  stream.destroy = function () {\n    ended = destroyed = true\n    stream.writable = stream.readable = paused = false\n    process.nextTick(function () {\n      stream.emit('close')\n    })\n  }\n  stream.pause = function () {\n    paused = true\n  }\n\n  stream.resume = function () {\n    paused = false\n  }\n\n  return stream\n}\n\n\n\n\n"},"lineCount":107}},"error":null,"hash":"05db3890db48b385cad6fcaca1e70e7c","cacheData":{"env":{}}}